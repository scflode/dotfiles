#!/usr/bin/env bash

echo -e "Installing php"

echo -e "\tSetting up asdf"
asdf plugin-add php https://github.com/asdf-community/asdf-php.git >/dev/null 2>&1
echo -e "\t\tInstalling prerequisites"
brew install autoconf automake bison freetype gd gettext icu4c krb5 libedit libiconv libjpeg libpng libxml2 libzip libpq openssl@1.1 pkg-config re2c zlib >/dev/null 2>&1

# Set the containing directory for later use
versions_dir="${HOME}/.dotfiles/installer/versions/php"

# See https://github.com/asdf-community/asdf-php/blob/master/bin/install
exit_if_homebrew_not_installed() {
  if [ "$(brew --version 2>/dev/null)" = "" ]; then
    echo "ERROR: Please install homebrew for macOS"
    exit 1
  fi
}

homebrew_package_path() {
  local package_name=$1

  if [ "$(brew ls --versions $package_name)" = "" ]; then
    echo ""
  else
    echo "$(brew --prefix $package_name)"
  fi
}

os_based_configure_options() {
  local operating_system=$(uname -a)
  local configure_options=""

  if [[ $operating_system =~ "Darwin" ]]; then

    exit_if_homebrew_not_installed

    local bison_path=$(homebrew_package_path bison)
    local bzip2_path=$(homebrew_package_path bzip2)
    local freetype_path=$(homebrew_package_path freetype)
    local gettext_path=$(homebrew_package_path gettext)
    local iconv_path=$(homebrew_package_path libiconv)
    local icu4c_path=$(homebrew_package_path icu4c)
    local jpeg_path=$(homebrew_package_path jpeg)
    local libedit_path=$(homebrew_package_path libedit)
    local libpng_path=$(homebrew_package_path libpng)
    local libxml2_path=$(homebrew_package_path libxml2)
    local libzip_path=$(homebrew_package_path libzip)
    local openssl_path=$(homebrew_package_path openssl@1.1)
    local readline_path=$(homebrew_package_path readline)
    local webp_path=$(homebrew_package_path webp)
    local zlib_path=$(homebrew_package_path zlib)

    # optional
    # if these packages exist they are included in the php compilation
    local gmp_path=$(homebrew_package_path gmp)
    local sodium_path=$(homebrew_package_path libsodium)

    if [ -n "$gmp_path" ]; then
      configure_options="--with-gmp=$gmp_path"
    else
      echo "gmp not found, not including in installation"
    fi

    if [ -n "$sodium_path" ]; then
      configure_options="$configure_options --with-sodium=$sodium_path"
    else
      echo "sodium not found, not including in installation"
    fi

    if [ -n "$freetype_path" ]; then
      configure_options="$configure_options --with-freetype-dir=$freetype_path"
    else
      export ASDF_PKG_MISSING="freetype"
    fi

    if [ -n "$bison_path" ]; then
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING bison"
    fi

    if [ -n "$gettext_path" ]; then
      configure_options="$configure_options --with-gettext=$gettext_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING gettext"
    fi

    if [ -n "$icu4c_path" ]; then
      configure_options="$configure_options --with-icu-dir=$icu4c_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING icu4c"
    fi

    if [ -n "$jpeg_path" ]; then
      configure_options="$configure_options --with-jpeg-dir=$jpeg_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING jpeg"
    fi

    if [ -n "$webp_path" ]; then
      configure_options="$configure_options --with-webp-dir=$webp_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING webp"
    fi

    if [ -n "$libpng_path" ]; then
      configure_options="$configure_options --with-png-dir=$libpng_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libpng"
    fi

    if [ -n "$openssl_path" ]; then
      configure_options="$configure_options --with-openssl=$openssl_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING openssl"
    fi

    if [ -n "$libxml2_path" ]; then
      configure_options="$configure_options --with-libxml-dir=$libxml2_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libxml2"
    fi

    if [ -n "$zlib_path" ]; then
      configure_options="$configure_options --with-zlib-dir=$zlib_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING zlib"
    fi

    if [ -n "$libzip_path" ]; then
      configure_options="$configure_options --with-libzip=$libzip_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libzip"
    fi

    if [ -n "$readline_path" ]; then
      configure_options="$configure_options --with-readline=$readline_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING readline"
    fi

    if [ -n "$libedit_path" ]; then
      configure_options="$configure_options --with-libedit=$libedit_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libedit"
    fi

    if [ -n "$bzip2_path" ]; then
      configure_options="$configure_options --with-bz2=$bzip2_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING bzip2"
    fi

    if [ -n "$iconv_path" ]; then
      configure_options="$configure_options --with-iconv=$iconv_path"
    else
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libiconv"
    fi
  else
    local jpeg_path=$(locate libjpeg.so | awk '{ print length(), $0 | "sort -n" }' | cut -d" " -f2- | head -n 1)
    local libpng_path=$(locate libpng.so | awk '{ print length(), $0 | "sort -n" }' | cut -d" " -f2- | head -n 1)
    configure_options="--with-openssl --with-curl --with-zlib --with-readline --with-gettext"

    if [ "$jpeg_path" = "" ]; then
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING jpeg"
    else
      configure_options="$configure_options --with-jpeg-dir=$jpeg_path --with-jpeg"
    fi

    if [ "$libpng_path" = "" ]; then
      export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libpng"
    else
      configure_options="$configure_options --with-png-dir=$libpng_path --with-png"
    fi
  fi

  echo $configure_options
}

# Read given file line by line
function read_file {
  local file_path="${versions_dir}"
  while read -r line
  do
    echo -e "${line}"
  done < "${file_path}"
}

# Install list of versions one by one
function install_versions {
  local versions_list=$(read_file)
  for version in ${versions_list}; do
    echo -e "\t\tInstalling ${version}"
    asdf install php ${version} >/dev/null 2>&1
    local status=$?
    if [ ${status} -ne "0" ]; then
      echo "Last exit code was ${status} for 'asdf install php ${version}'. Please run manually. Aborting."
      exit 1
    fi
  done
  # Set the latest version as global
  set_global ${version}
}

function set_global {
  local latest_version=${1}
  echo -e "\tSetting ${latest_version} as global"
  asdf global php ${latest_version} >/dev/null 2>&1
}

echo -e "\tInstalling versions"
export PKG_CONFIG_PATH=$(brew --prefix icu4c)/lib/pkgconfig:$(brew --prefix krb5)/lib/pkgconfig:$(brew --prefix libedit)/lib/pkgconfig:$(brew --prefix libxml2)/lib/pkgconfig:$(brew --prefix openssl)/lib/pkgconfig
export PATH=$(brew --prefix bison)/bin:${PATH}
export PHP_WITHOUT_PDO_PGSQL=yes 
export PGSQL_INCLUDE=$(which pg_config) 
export PHP_CONFIGURE_OPTIONS="$(os_based_configure_options) \
  --with-pdo-pgsql=${PGSQL_INCLUDE} \
  --with-pgsql=${PGSQL_INCLUDE}"

install_versions 

